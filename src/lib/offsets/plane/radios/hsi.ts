import { Type } from 'fsuipc';

import { OffsetCategory } from '@shared/offset-category';
import { OffsetList } from '@shared/offset-list';
import { Offset } from '@shared/offset';

export const HSI: OffsetList = {
  HSICDINeedlePosition: new Offset({
    value: 0x2F88,
    name: 'HSICDINeedlePosition',
    category: OffsetCategory.RADIOS,
    description: 'HSI CDI needle position - percent - 10 for VOR - 2.5 for LOC',
    type: Type.Double,
    convert: 'Math.round({VAL} * 100 / 127)',
    permission: 'r',
  }),
  HSIGSINeedlePosition: new Offset({
    value: 0x2F90,
    name: 'HSIGSINeedlePosition',
    category: OffsetCategory.RADIOS,
    description: 'HSI GSI needle position - percent - represents range from -0.7 to 0.7',
    type: Type.Double,
    convert: 'Math.round({VAL} * 100 / 119)',
    permission: 'r',
  }),
  HSISpeed: new Offset({
    value: 0x2F98,
    name: 'HSISpeed',
    category: OffsetCategory.RADIOS,
    description: 'HSI speed',
    type: Type.Double,
    convert: 'Math.round({VAL} * 1.94384)',
    permission: 'r',
  }),
  HSIDistance: new Offset({
    value: 0x2FA0,
    name: 'HSIDistance',
    category: OffsetCategory.RADIOS,
    description: 'HSI distance - meters',
    type: Type.Double,
    permission: 'r',
  }),
  HSIBearing: new Offset({
    value: 0x2FA8,
    name: 'HSIBearing',
    category: OffsetCategory.RADIOS,
    description: 'HSI bearing - degrees',
    type: Type.UInt16,
    permission: 'r',
  }),
  HSICDIValid: new Offset({
    value: 0x2FAA,
    name: 'HSICDIValid',
    category: OffsetCategory.RADIOS,
    description: 'HSI CDI valid flag',
    convert: '!!{VAL}',
    type: Type.Byte,
    permission: 'r',
  }),
  HSIGSIValid: new Offset({
    value: 0x2FAB,
    name: 'HSIGSIValid',
    category: OffsetCategory.RADIOS,
    description: 'HSI GSI valid flag',
    convert: '!!{VAL}',
    type: Type.Byte,
    permission: 'r',
  }),
  HSIBearingValid: new Offset({
    value: 0x2FAC,
    name: 'HSIBearingValid',
    category: OffsetCategory.RADIOS,
    description: 'HSI Bearing valid flag',
    convert: '!!{VAL}',
    type: Type.Byte,
    permission: 'r',
  }),
  HSIToFrom: new Offset({
    value: 0x2FAD,
    name: 'HSIToFrom',
    category: OffsetCategory.RADIOS,
    description: 'HSI To/From flag',
    convert: 'vorToFrom',
    mapping: true,
    type: Type.Byte,
    permission: 'r',
  }),
  HSIHasLocaliser: new Offset({
    value: 0x2FAE,
    name: 'HSIHasLocaliser',
    category: OffsetCategory.RADIOS,
    description: 'HSI has localiser flag',
    convert: '!!{VAL}',
    type: Type.Byte,
    permission: 'r',
  }),
  HSIIdent: new Offset({
    value: 0x2FB0,
    name: 'HSIIdent',
    category: OffsetCategory.RADIOS,
    description: 'HSI ident string',
    length: 6,
    type: Type.String,
    permission: 'r',
  }),
};
