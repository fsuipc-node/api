import { Type } from 'fsuipc';

import { OffsetCategory } from '@shared/offset-category';
import { OffsetList } from '@shared/offset-list';
import { Offset } from '@shared/offset';

export const controls: OffsetList = {
  autoRudder: new Offset({
    value: 0x278,
    name: 'autoRudder',
    category: OffsetCategory.CONTROLS,
    description: 'auto coordination',
    convert: '!!{VAL}',
    type: Type.Int16,
    permission: 'rw',
  }),
  leftAileronDeflection: new Offset({
    value: 0x3B0,
    name: 'leftAileronDeflection',
    category: OffsetCategory.CONTROLS,
    description: 'left aileron deflection - radians',
    type: Type.Double,
    permission: 'r',
  }),
  rightAileronDeflection: new Offset({
    value: 0x3B8,
    name: 'rightAileronDeflection',
    category: OffsetCategory.CONTROLS,
    description: 'right aileron deflection - radians',
    type: Type.Double,
    permission: 'r',
  }),
  rotorClutchSwitch: new Offset({
    value: 0x889,
    name: 'rotorClutchSwitch',
    category: OffsetCategory.CONTROLS,
    description: 'rotor clutch switch',
    convert: '!!{VAL}',
    type: Type.Byte,
    permission: 'rw',
  }),
  propellerPitchControl: new Offset({
    value: 0xAF0,
    name: 'propellerPitchControl',
    category: OffsetCategory.CONTROLS,
    description: '0=fixed, 1=auto, 2=manual',
    type: Type.UInt16,
    permission: 'rw',
  }),
  elevatorPositionControl: new Offset({
    value: 0xBB2,
    name: 'elevatorPositionControl',
    description: 'elevator position control - percent',
    category: OffsetCategory.CONTROLS,
    convert: 'Math.round({VAL} / 16383 * 100)',
    type: Type.Int16,
    permission: 'rw',
  }),
  elevatorIndicator: new Offset({
    value: 0xBB4,
    name: 'elevatorIndicator',
    description: 'elevator indicator',
    category: OffsetCategory.CONTROLS,
    type: Type.Int16,
    permission: 'r',
  }),
  aileronPositionControl: new Offset({
    value: 0xBB6,
    name: 'aileronPositionControl',
    description: 'aileron position control - percent',
    category: OffsetCategory.CONTROLS,
    convert: 'Math.round({VAL} / 16383 * 100)',
    type: Type.Int16,
    permission: 'rw',
  }),
  aileronIndicator: new Offset({
    value: 0xBB8,
    name: 'aileronIndicator',
    description: 'aileron indicator',
    category: OffsetCategory.CONTROLS,
    type: Type.Int16,
    permission: 'r',
  }),
  rudderPositionControl: new Offset({
    value: 0xBBA,
    name: 'rudderPositionControl',
    description: 'rudder position control - percent',
    category: OffsetCategory.CONTROLS,
    convert: 'Math.round({VAL} / 16383 * 100)',
    type: Type.Int16,
    permission: 'rw',
  }),
  rudderIndicator: new Offset({
    value: 0xBBC,
    name: 'rudderIndicator',
    description: 'rudder indicator',
    category: OffsetCategory.CONTROLS,
    type: Type.Int16,
    permission: 'r',
  }),
  elevatorTrimPositionControl: new Offset({
    value: 0xBC0,
    name: 'elevatorTrimPositionControl',
    description: 'elevator trim position control - percent',
    category: OffsetCategory.CONTROLS,
    convert: 'Math.round({VAL} / 16383 * 100)',
    type: Type.Int16,
    permission: 'rw',
  }),
  elevatorTrimIndicator: new Offset({
    value: 0xBC2,
    name: 'elevatorTrimIndicator',
    description: 'elevator trim indicator',
    category: OffsetCategory.CONTROLS,
    type: Type.Int16,
    permission: 'r',
  }),
  leftBrakeApplication: new Offset({
    value: 0xBC4,
    name: 'leftBrakeApplication',
    description: 'left brake application pressure - percent - will match 100% if parking brake on',
    category: OffsetCategory.CONTROLS,
    convert: 'Math.round({VAL} / 16383 * 100)',
    type: Type.Int16,
    permission: 'r',
  }),
  rightBrakeApplication: new Offset({
    value: 0xBC6,
    name: 'rightBrakeApplication',
    description: 'right brake application pressure - percent - will match 100% if parking brake on',
    category: OffsetCategory.CONTROLS,
    convert: 'Math.round({VAL} / 16383 * 100)',
    type: Type.Int16,
    permission: 'r',
  }),
  parkingBrake: new Offset({
    value: 0xBC8,
    name: 'parkingBrake',
    description: 'parking brake active',
    category: OffsetCategory.CONTROLS,
    convert: 'typeof {VAL} === `boolean` ? {VAL} ? 32767 : 0 : {VAL} >= 32767',
    type: Type.Int16,
    permission: 'r',
  }),
  brakingIndicator: new Offset({
    value: 0xBCA,
    name: 'brakingIndicator',
    description: 'braking indicator',
    category: OffsetCategory.CONTROLS,
    convert: 'appliedBrakes',
    mapping: true,
    type: Type.Int16,
    permission: 'r',
  }),
};
